/**
 * @license
 * Copyright TAMISEMI All Rights Reserved.
 *
 * Use of this source code is governed by an Apache-style license that can be
 * found in the LICENSE file at https://tamisemi.go.tz/license
 */
import { Component, Inject, OnInit } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { Observable } from 'rxjs';
import { finalize } from 'rxjs/operators';
import { DynamicDialogConfig, DynamicDialogRef } from 'primeng/dynamicdialog';

import { CustomResponse } from '../../../utils/custom-response';
<%_ if(enums.length > 0) { _%>
import { EnumService, PlanrepEnum } from 'src/app/shared/enum.service';
<%_ } _%>
<%_ relations.forEach(function(r){ _%>
  import { <%= r.rlCap %> } from 'src/app/setup/<%= r.rlSnake %>/<%= r.rlSnake %>.model';  
  import { <%= r.rlCap %>Service } from 'src/app/setup/<%= r.rlSnake %>/<%= r.rlSnake %>.service';  
<%_ }); _%>
<%_ jsons.forEach(function(j){ _%>
  import { <%= j.jCap %> } from 'src/app/setup/<%= j.jSnake %>/<%= j.jSnake %>.model';  
  import { <%= j.jCap %>Service } from 'src/app/setup/<%= j.jSnake %>/<%= j.jSnake %>.service';  
<%_ }); _%>
import { <%= capEntityName %> } from '../<%= snakeEntityName %>.model';
import { <%= capEntityName %>Service } from '../<%= snakeEntityName %>.service';
import { ToastService } from 'src/app/shared/toast.service';

@Component({
  selector: 'app-<%= snakeEntityName %>-update',
  templateUrl: './<%= snakeEntityName %>-update.component.html',
})
export class <%= capEntityName %>UpdateComponent implements OnInit {
  isSaving = false;
  formError = false;
  errors = [];

  <%_ relations.forEach(function(r){ _%>
    <%= r.rlCamelPlural %>?: <%= r.rlCap %>[] = [];  
  <%_ }); _%>
  <%_ jsons.forEach(function(j){ _%>
    <%= j.jCamelPlural %>?: <%= j.jCap %>[] = [];  
  <%_ }); _%>
  <%_ enums.forEach(function(e){ _%>
    <%= e.eCamelPlural %>?: PlanrepEnum[] = [];  
  <%_ }); _%>

  /**
   * Declare form
   */
  editForm = this.fb.group({
   <%_ fields.forEach(function(f){ _%>
      <%=f.name %>: [null, 
      <%_ if (f.validations !== undefined || allMandatory.includes(f.name)) { _%>
        [
          <%_  if(f.validations !== null && f.validations.includes('required') || allMandatory.includes(f.name)){_%>Validators.required,<%_}_%> 
        ]
        <%_}_%>],
    <%_ }); _%>
  });

  constructor(
    protected <%= camelEntityName %>Service: <%= capEntityName %>Service,
    <%_ relations.forEach(function(r){ _%>
      protected <%= r.rlCamel %>Service: <%= r.rlCap %>Service,
    <%_ }); _%>
    <%_ jsons.forEach(function(j){ _%>
      protected <%= j.jCamel %>Service: <%= j.jCap %>Service,
    <%_ }); _%>
    public dialogRef: DynamicDialogRef,
    public dialogConfig: DynamicDialogConfig,
    protected fb: FormBuilder,
    private toastService: ToastService,
    <%_ if(enums.length > 0) { _%>
      protected enumService: EnumService
    <%_}_%>
  ) {}

  ngOnInit(): void {
    <%_ relations.forEach(function(r){ _%>
      this.<%= r.rlCamel %>Service.query({columns:['id', 'name']}).subscribe((resp: CustomResponse<<%= r.rlCap %>[]>) => this.<%= r.rlCamelPlural %>=resp.data)
    <%_ }); _%>
    <%_ jsons.forEach(function(j){ _%>
      this.<%= j.jCamel %>Service.query({columns:['id', 'name']}).subscribe((resp: CustomResponse<<%= j.jCap %>[]>) => this.<%= j.jCamelPlural %>=resp.data)
    <%_ }); _%>
    <%_ enums.forEach(function(e){ _%>
      this.<%= e.eCamelPlural %>=this.enumService.get('<%=e.eCamelPlural%>');
    <%_ }); _%>
    this.updateForm(this.dialogConfig.data); //Initilize form with data from dialog
  }

  /**
   * When form is valid Create <%= capEntityName %> or Update Facilitiy type if exist else set form has error and return
   * @returns
   */
  save(): void {
    if (this.editForm.invalid) {
      this.formError = true;
      return;
    }
    this.isSaving = true;
    const <%= camelEntityName %> = this.createFromForm();
    if (<%= camelEntityName %>.id !== undefined) {
      this.subscribeToSaveResponse(
        this.<%= camelEntityName %>Service.update(<%= camelEntityName %>)
      );
    } else {
      this.subscribeToSaveResponse(
        this.<%= camelEntityName %>Service.create(<%= camelEntityName %>)
      );
    }
  }

  protected subscribeToSaveResponse(
    result: Observable<CustomResponse<<%= capEntityName %>>>
  ): void {
    result.pipe(finalize(() => this.onSaveFinalize())).subscribe(
      (result) => this.onSaveSuccess(result),
      (error) => this.onSaveError(error)
    );
  }

  /**
   * When save successfully close dialog and dispaly info message
   * @param result
   */
  protected onSaveSuccess(result: any): void {
    this.toastService.info(result.message);
    this.dialogRef.close(true);
  }

  /**
   * Error handiling specific to this component
   * Note; general error handleing is done by ErrorInterceptor
   * @param error
   */
  protected onSaveError(error: any): void {}

  protected onSaveFinalize(): void {
    this.isSaving = false;
  }

  /**
   * Set/Initialize form values
   * @param <%= camelEntityName %>
   */
  protected updateForm(<%= camelEntityName %>: <%= capEntityName %>): void {
    this.editForm.patchValue({
      <%_ fields.forEach(function(f){ _%>
        <%=f.name %>: <%= camelEntityName %>.<%=f.name %>,
      <%_ }); _%>
    });
  }

  /**
   * Return form values as object of type <%= capEntityName %>
   * @returns <%= capEntityName %>
   */
  protected createFromForm(): <%= capEntityName %> {
    return {
      ...new  <%= capEntityName %>(),
      <%_ fields.forEach(function(f){ _%>
        <%=f.name %>: this.editForm.get(['<%=f.name %>'])!.value,
      <%_ }); _%>
    };
  }
}
