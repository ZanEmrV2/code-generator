import { Component, OnDestroy, OnInit } from '@angular/core';
import { <%= capEntityName %> } from './model/<%= snakeEntityName %>.model';
import { SearchData } from '../../shared/components/search-table/model/search-table.model';
import { <%= capEntityName %>Service } from './service/<%= snakeEntityName %>.service';
import { AppDialogService } from '../../shared/services/app-dialog.service';
import { Subscription } from 'rxjs';
import { <%= capEntityName %>FormComponent } from './views/<%= snakeEntityName %>-form/<%= snakeEntityName %>-form.component';


@Component({
    selector: 'app-<%= snakeEntityName %>',
    templateUrl: './<%= snakeEntityName %>.component.html',
})
export class <%= capEntityName %>Component implements OnInit, OnDestroy {
  items: <%= capEntityName %>[] = [];
  filters = [
  <%_ fields.forEach(function(f){ _%>
    <%_ if (f.name != 'id' && f.searchable) { _%> 
      { 
        name: '<%= f.name %>', 
        label:'<%= f.label %>',
      },
    <%_ } _%>
  <%_ }); _%>
  ];
  columns = [
  <%_ fields.forEach(function(f){ _%>
    <%_ if (f.name != 'id' && allMandatory.indexOf(f.name) === -1) { _%> 
      { 
        name: '<%= f.name %>', 
        label:'<%= f.label %>',
        sort: <%_ if (f.searchable && f.dataType !== 'boolean' && f.dataType !== 'integer' && f.dataType !== 'boolean' && f.dataType !== 'decimal' && f.dataType !== 'double' && f.dataType !== 'float') { _%>
           <%=true%>
          <%_} else { _%>
            <%=false%>
         <%_ } _%>  
      },
    <%_ } _%>
  <%_ }); _%>
  ];
  actions = [
    {
      label: 'Update',
      command: () => this.update(),
    },
    {
      label: 'Delete',
      command: () => this.delete(),
    },
  ];
  subscription!: Subscription;
  rowSelected: any;
  //pagination
  params = { pageNo: 0, pageSize: 1 };
  totalRecords: number = 0;
  first: number = 0;
  last: number = 0;

  constructor(
    private _service: <%= capEntityName %>Service,
    private _dialogSvc: AppDialogService
  ) {
    //add logic here
  }

  ngOnInit(): void {}

  ngOnDestroy(): void {
    this.unsubscribe();
  }

  get<%= capEntityName %>(params: any) {
    this.subscription = this._service.get(params).subscribe({
      next: (result) => {
        if (result.status == 200) {
          this.items = result.data;
          this.first = result.page;
          this.last = result.page + 1;
          this.totalRecords = result.total;
        }
      },
      complete: () => {
        this.unsubscribe();
      },
    });
  }

  pageChange(event: any) {
    this.params.pageNo = event.first! / event.rows!;
    this.params.pageSize = event.rows;
    this.get<%= capEntityName %>(this.params);
  }

  unsubscribe() {
    if(this.subscription){
      this.subscription.unsubscribe();
    }
  }

  addNew(): void {
    const data = { action: 'Add', item: null };
    /** Open form dialog */
    this.subscription = this._dialogSvc
      .open('Add <%= entityName %>', 'md', <%= capEntityName %>FormComponent, data)
      .subscribe({
        next: (result) => {
          if (result && result.success) {
            this._dialogSvc.success(result.message);
            this.get<%= capEntityName %>(this.params);
          }
        },
        complete: () => {
          this.unsubscribe();
        },
      });
    /** end */
  }

  search(search: SearchData): void {
    if (search.value != null && search.value.length > 3) {
      this.get<%= capEntityName %>({ ...this.params, [search.key]: search.value });
    } else if (search.value == '') {
      this.get<%= capEntityName %>(this.params);
    }
  }

  update(): void {
    const data = { action: 'Update', item: this.rowSelected };
    this.subscription = this._dialogSvc
      .open('Update <%= entityName %>', 'md', <%= capEntityName %>FormComponent, data)
      .subscribe({
        next: (result) => {
          if (result && result.success) {
            this._dialogSvc.success(result.message);
            this.get<%= capEntityName %>(this.params);
          }
        },
        complete: () => {
          this.unsubscribe();
        },
      });
  }

  delete(): void {
    const message = `Are you sure you want to delete this item?`;
    this.subscription = this._dialogSvc.confirm(message).subscribe({
      next: (result) => {
        if (result) {
          this._service.delete(this.rowSelected.uuid).subscribe((result) => {
            if (result.status == 200) {
              this._dialogSvc.success(result.message);
              this.get<%= capEntityName %>(this.params);
            }
          });
        }
      },
      complete: () => {
        // Unsubscribe when the confirmation dialog is closed
        this.unsubscribe();
      },
    });
  }

  handRowSelect(event: any) {
    this.rowSelected = event; //save selected row from the table
  }
}
