package <%=package%>.<%= parentFolder %>.<%=snakeEntityName%>;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import <%=package%>.core.BaseModel;
<%_ relations.forEach(function(r){ _%>
import <%=package%>.<%=parentFolder%>.<%= r.rlSnake%>.<%=r.rlCap %>;
<%_ }); _%>


/**
* Entity representing a <%= capEntityName %> in the system.
* This class maps to the '<%= tableName %>' table in the database.
    * Inherits from {@link BaseModel}, which includes common auditing fields like 'id', uuid, 'createdAt', createdBy etc.
    */
@Getter
@Setter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "<%= tableName %>")
public class <%= capEntityName %> extends BaseModel {

    <%_ fields.forEach(function(f){ _%>
       <%_ if(!f.relation && f.name != 'id' &&  f.name != 'uuid' && f.dataType != 'enum') { _%>
            <%_
                var type = 'String';
                var stringMax;
                var defaultValue;
                if(f.dataType.includes('string')) {
                    stringMax = 255;
                    if(f.dataType.includes(',')) {
                        stringMax = f.dataType.split(',')[1];
                    }
                }
                if (f.dataType.includes('increments')) {
                    type = 'Long'
                }
                if (f.dataType.includes('uuid')) {
                    type = 'UUID'
                }
                if (f.dataType.includes('integer')) {
                    type = 'Integer'
                }
                if (f.dataType.includes('date')) {
                    type = 'LocalDate'
                }
                if (f.dataType.includes('timestamp')) {
                    type = 'LocalDateTime'
                }
                if (f.dataType.includes('decimal') || f.dataType.includes('numeric')) {
                    type = 'BigDecimal'
                }
                if (f.dataType.includes('boolean')) {
                    type = 'Boolean'
                    defaultValue = f.defaultValue && f.defaultValue.includes('false') ? 'Boolean.FALSE' : 'Boolean.TRUE';
                }
            _%>
            <%_ if(f.validations !== undefined && f.validations.includes('required')){ _%>
                <%_ if(f.validations.includes('required')){ _%>
                    @NotNull
                <%_ } _%>
            <%_ } _%>
            <%_ if(f.dataType.includes('string') ){ _%>
            @Size(max=<%=stringMax %>)
            <%_ } _%>
            private <%= type %> <%= f.name %> <%_ if(defaultValue){ _%> = <%=defaultValue%> <%_ } _%>;
      <%_ } _%>
    <%_ }); _%>

    <%_ enums.forEach(function(e){ _%>
        <%_ if (e.validations.includes('required')) { _%>
           @NotNull
        <%_ } _%>
        private <%=e.eCap%> <%=e.eCamel%>;
    <%_ }); _%>

   <%_ relations.forEach(function(r){ _%>
        <%_ if (r.type === 'mt1') { _%>
            @NotNull
            @Column(name = "<%=r.name%>")
            private Long <%=r.rlCamel%>Id;

            @ManyToOne(fetch = FetchType.LAZY)
            @JsonIgnoreProperties({"<%=camelPluralEntityName%>"})
            @JoinColumn(name = "<%=r.name%>", insertable = false, updatable = false)
            private <%=r.rlCap%> <%=r.rlCamel%>;

        <%_ } _%>
   <%_ }); _%>

}
