package <%=package%>.<%= parentFolder %>.<%=snakeEntityName%>;

import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.EqualsAndHashCode;

import <%=package%>.core.BaseDto;

/**
* Data Transfer Object (DTO) for the {@link <%= capEntityName %>} entity.
* This class is used to transfer <%= capEntityName %> data between the client and server.
* It extends {@link BaseDto}, which provides common fields like id, uuid.
*/
@Data
@AllArgsConstructor
@NoArgsConstructor
@EqualsAndHashCode(callSuper = true)
public class <%= capEntityName %>Dto extends BaseDto {
    <%_ fields.forEach(function(f){ _%>
        <%_ if(!f.relation ) { _%>
            <%_
                var type = 'String';
                var stringMax;
                var defaultValue;
                if(f.dataType.includes('string')) {
                    stringMax = 255;
                    if(f.dataType.includes(',')) {
                        stringMax = f.dataType.split(',')[1];
                    }
                }
                if (f.dataType.includes('increments')) {
                  type = 'Long'
                }
                if (f.dataType.includes('uuid')) {
                  type = 'UUID'
                }
                if (f.dataType.includes('integer')) {
                  type = 'Integer'
                }
                if (f.dataType.includes('date')) {
                  type = 'LocalDate'
                }
                if (f.dataType.includes('timestamp')) {
                  type = 'LocalDateTime'
                }
                if (f.dataType.includes('decimal')) {
                  type = 'BigDecimal'
                }
                if (f.dataType.includes('boolean')) {
                    type = 'Boolean'
                    defaultValue = f.defaultValue && f.defaultValue.includes('false') ? 'Boolean.FALSE' : 'Boolean.TRUE';
                }
            _%>
            <%_ if(f.validations !== undefined && f.validations.includes('required')){_%>
                <%_ if(f.validations.includes('required')){_%>
                    @NotNull
                <%_ } _%>
            <%_ } _%>
            <%_ if(f.dataType.includes('string') ){ _%>
            @Size(max=<%=stringMax %>)
            <%_ } _%>
            private <%= type %> <%= f.name %> <%_ if(defaultValue){ _%> = <%=defaultValue%> <%_ } _%>;
        <%_ } _%>
    <%_ }); _%>

    <%_ relations.forEach(function(r){ _%>
       <%_ if (r.type === 'mt1') { _%>
            @NotNull
            private Long <%=r.rlCamel%>Id;

            private String <%=r.rlCamel%>Name;
        <%_ } _%>
    <%_ }); _%>
}