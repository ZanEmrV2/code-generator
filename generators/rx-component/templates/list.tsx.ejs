import React, { useState } from 'react';
import { DataTableFilterMeta } from 'primereact/datatable';
import ErrorBoundary from '../../utils/error-boundary';
import {
  <%= capEntityName %>,
  <%= capEntityName %>Update,
  useDelete<%= capEntityName %>,
  useFetch<%=capPluralEntityName%>,
  <%=camelEntityName%>DefaultValue,
} from '.';
import {
  DEFAULT_QUERY_PARAMS,
  IQueryParams,
  stringDefaultFilter,
} from '../../utils/utils';
import { useAppToast } from '../shared/toast-provider';
import { AppTable } from '../shared/app-table';

export default function <%= capEntityName %>List() {
  const initialOptionFilters: DataTableFilterMeta = {
    <%_ fields.forEach(function(f){ _%>
       <%_ if(f.searchable){ _%>
       <%=f.camelName %>: stringDefaultFilter,
       <%_ } _%>
    <%_ }); _%>
  };

  const columns = [
    <%_ fields.forEach(function(f){ _%>
      <%_ if (f.name != 'id' && f.relation === undefined &&  !f.dbType.includes('json')) { _%> 
      { field: '<%=f.camelName%>', header: '<%=f.header%>', <%_ if(f.searchable){ searchable: true } %>},
      <%_ } _%>

    <%_ }); _%>
  ];

  const [showCreateOrUpdate, setShowCreateOrUpdate] = useState(false);

  const [<%= camelEntityName %>, set<%= capEntityName %>] = useState<<%= capEntityName %>>();

  const { showSuccess, showError, confirm } = useAppToast();

  const [queryParams, setQueryParams] =
    useState<IQueryParams>(DEFAULT_QUERY_PARAMS);

  const <%=camelPluralEntityName%>Query = useFetch<%=capPluralEntityName%>({
    queryParams,
  });

  const deteleMutation = useDelete<%= capEntityName %>({
    onSuccess: () => {
      <%=camelPluralEntityName%>Query.refetch();
      showSuccess('<%= capEntityName %> deleted successfully');
    },
    onError: () => {
      showError('Something went wrong', 'Cannot delete <%= capEntityName %>');
    },
  });

  const createOrEdit = (<%=camelEntityName%>Data?: <%= capEntityName %>) => {
    const data = <%=camelEntityName%>Data || {...<%=camelEntityName%>DefaultValue};
    set<%= capEntityName %>(data);
    setShowCreateOrUpdate(true);
  };

  const closeDialog = (result: boolean) => {
    setShowCreateOrUpdate(false);
    set<%= capEntityName %>(undefined);
    if (result) {
      <%=camelPluralEntityName%>Query.refetch();
      showSuccess('<%= capEntityName %> created successfully');
    }
  };

  const onParamChange = (changes: any) => {
    setQueryParams({
      ...queryParams,
      ...changes,
    });
  };
 
  const confirmDelete = (<%= camelEntityName %>: <%= capEntityName %>) => {
    confirm(`Are you sure you want to delete this <%= capEntityName %>`, 'Confirm Delete', () =>
      deteleMutation.mutate(<%= camelEntityName %>.id!),
    );
  };

  return (

    <div className="flex flex-column gap-3">
      <AppTable
        columns={columns}
        query={<%= camelPluralEntityName %>Query}
        title="<%=capPluralEntityName%>"
        queryParams={queryParams}
        initialOptionFilters={initialOptionFilters}
        mutation={deteleMutation}
        createOrEdit={createOrEdit}
        confirmDelete={confirmDelete}
        onParamChange={onParamChange}
      />
      {showCreateOrUpdate && (
        <ErrorBoundary>
          <<%= capEntityName %>Update
            show={showCreateOrUpdate}
            <%= camelEntityName %>={<%= camelEntityName %>}
            onClose={closeDialog}
          />
        </ErrorBoundary>
      )}
    </div>
  );
}
